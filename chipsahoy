#! /bin/bash

## Help message when no parameter is provide.
if [ $# -eq 0 ]
then
   echo "Usage: chipsahoy  <params_file>"
   echo ""
   echo "params.file: Input file with the parameters"
   echo "an example of input file can be found in the test folder"
   exit
elif [ $# -gt 1 ]
then
   echo "FATAL ERROR!!!! I'm just joking son, you just entered more than one parameter"
   exit
fi

## Reading in parameter file:
PARAMS=$1

echo ""
echo "======================"
echo "| LOADING PARAMETERS |"
echo "======================"
echo ""

INSDIR=$(grep installation_directory: $PARAMS | awk '{ print $2 }')
echo "Installation directory = $INSDIR"
WD=$(grep working_directory: $PARAMS | awk '{ print $2 }')
echo "Working directory = $WD"
EXP=$(grep experiment_name: $PARAMS | awk '{ print $2 }')
echo "Experiment name = $EXP"
NUMREPTF=$(grep number_rep_tf: $PARAMS | awk  '{ print $2 }')
echo "Number of TF replicas = $NUMREPTF"
NUMREPCON=$(grep number_rep_control: $PARAMS | awk  '{ print $2 }')
echo "Number of control replicas = $NUMREPCON"
NUMTF=$(grep number_TF: $PARAMS | awk  '{ print $2 }')
echo "Number of TF samples = $NUMTF"
NUMCONTROL=$(grep number_control: $PARAMS | awk '{ print $2 }')
echo "Number of control samples = $NUMCONTROL"
GENOME=$(grep path_genome: $PARAMS | awk '{ print $2 }')
echo "Reference genome = $GENOME"
ANNOT=$(grep path_annotation: $PARAMS | awk '{ print $2 }')
echo "Genome Annotation = $ANNOT"
PAIRED=$(grep paired: $PARAMS | awk '{ print $2 }')
echo "Paired reads = $PAIRED"

UP1=$(grep up1: $PARAMS | awk '{ print $2 }')
echo "up1 = $UP1"
DOWN1=$(grep down1: $PARAMS | awk '{ print $2 }')
echo "down1 = $DOWN1"
UP2=$(grep up2: $PARAMS | awk '{ print $2 }')
echo "up1 = $UP2"
DOWN2=$(grep down2: $PARAMS | awk '{ print $2 }')
echo "down1 = $DOWN2"
PVALUEGO=$(grep pvalueCutoff: $PARAMS | awk '{ print $2 }')
echo "PvalueCutoff = $PVALUEGO"
PVALUEKEGG=$(grep pvaluekegg: $PARAMS | awk '{ print $2 }')
echo "Pvaluekegg = $PVALUEKEGG"

# Reading samples.

i=1
CHIP=()
while [ $i -le $NUMTF ]
do
   CHIP+=$(grep path_chip_$i: $PARAMS | awk '{for (k=2; k<=NF; k++) printf $k " "}')
   ((i++))
done


echo "Initial Chip array = "
echo ${CHIP[@]}
echo LENGTH=${#CHIP[@]}

string="$CHIP"
echo "Passing array to string"
echo "string"

echo "Breaking array"
read -a CHIP <<< $string

echo "Broken array"
echo ${CHIP[@]}
echo LENGTH=${#CHIP[@]}

i=1
CONTROL=()
while [ $i -le $NUMCONTROL ]
do
   CONTROL+=$(grep path_control_$i: $PARAMS | awk '{for (k=2; k<=NF; k++) printf $k " "}')
   ((i++))
done


echo "Initial Control array = "
echo ${CONTROL[@]}
echo LENGTH=${#CONTROL[@]}

string="$CONTROL"
echo "Passing array to string"
echo "string"

echo "Breaking array"
read -a CONTROL <<< $string

echo "Broken array"
echo ${CONTROL[@]}
echo LENGTH=${#CONTROL[@]}


echo "Parameters read!!"


## Generating work space:
echo ""
echo "=========================="
echo "| CREATING WORKING SPACE |"
echo "=========================="
echo ""

cd $WD
mkdir $EXP
cd $EXP
mkdir scripts genome annotation samples results
cd genome
cp $GENOME genome.fa
cd ../annotation
cp $ANNOT annotation.gtf

#Generating reference genome index:
cd ../genome
bowtie2-build genome.fa index

echo "Index done!!"

cd ../samples
mkdir chip control
cd chip

i=1
k=0
while [ $i -le $NUMTF ]
do
   mkdir chip_sample_$i
   cd  chip_sample_$i
   j=1
   if [ $PAIRED -eq 0 ]
   then
      while [ $j -le $NUMREPTF ]
      do
        cp ${CHIP[$k]} chip_$i$j.gz
        echo ${CHIP[$k]}
        ((k++))
        ((j++))
      done
      cd ..
      ((i++))
   else
      while [ $j -le $NUMREPTF ]
      do
         l=1
         cp ${CHIP[$k]} chip_$i$j$l.gz
         echo ${CHIP[$k]}
         ((l++))
         ((k++))
         cp ${CHIP[$k]} chip_$i$j$l.gz
         echo ${CHIP[$k]}
         ((k++))
         ((j++))
      done
      cd ..
      ((i++))
   fi
done


cd ../control

i=1
k=0
while [ $i -le $NUMCONTROL ]
do
   mkdir control_sample_$i
   cd  control_sample_$i
   j=1
   if [ $PAIRED -eq 0 ]
   then
      while [ $j -le $NUMREPCON ]
      do
        cp ${CONTROL[$k]} control_$i$j.gz
        echo ${CONTROL[$k]}
        ((k++))
        ((j++))
      done
      cd ..
      ((i++))
   else
      while [ $j -le $NUMREPCON ]
      do
         l=1
         cp ${CONTROL[$k]} control_$i$j$l.gz
         echo ${CONTROL[$k]}
         ((l++))
         ((k++))
         cp ${CONTROL[$k]} control_$i$j$l.gz
         echo ${CONTROL[$k]}
         ((k++))
         ((j++))
      done
      cd ..
      ((i++))
   fi
done

echo "Samples charged!!"

cd ../../results


# Processing Chip samples: NUEVO

if [ $PAIRED -eq 0 ]
then
   i=1
   while [ $i -le $NUMTF ]
   do
      j=1
      while [ $j -le $NUMREPTF ]
      do
         SAMPLENAME1=$"chip_$i$j"
         SAMPLENAME2=0
         bash $INSDIR/ChipsAhoy/sample_processing $WD/$EXP/samples/chip/chip_sample_$i $SAMPLENAME1 $SAMPLENAME2 $PAIRED chip_$i$j
         ((j++))
      done
      ((i++))
   done
else
   i=1
   while [ $i -le $NUMTF ]
   do
      j=1
      while [ $j -le $NUMREPTF ]
      do
         l=1
         SAMPLENAME1=$"chip_$i$j$l"
         ((l++))
         SAMPLENAME2=$"chip_$i$j$l"
         bash $INSDIR/ChipsAhoy/sample_processing $WD/$EXP/samples/chip/chip_sample_$i $SAMPLENAME1 $SAMPLENAME2 $PAIRED chip_$i$j
         ((j++))
      done
      ((i++))
   done
fi


# Processing Control samples: 

if [ $PAIRED -eq 0 ]
then
   i=1
   while [ $i -le $NUMCONTROL ]
   do
      j=1
      while [ $j -le $NUMREPCON ]
      do
         SAMPLENAME1=$"control_$i$j"
         SAMPLENAME2=0
         bash $INSDIR/ChipsAhoy/sample_processing $WD/$EXP/samples/control/control_sample_$i $SAMPLENAME1 $SAMPLENAME2 $PAIRED control_$i$j
         ((j++))
      done
      ((i++))
   done
else
   i=1
   while [ $i -le $NUMCONTROL ]
   do
      j=1
      while [ $j -le $NUMREPCON ]
      do
         l=1
         SAMPLENAME1=$"control_$i$j$l"
         ((l++))
         SAMPLENAME2=$"control_$i$j$l"
         bash $INSDIR/ChipsAhoy/sample_processing $WD/$EXP/samples/control/control_sample_$i $SAMPLENAME1 $SAMPLENAME2 $PAIRED control_$i$j
         ((j++))
      done
      ((i++))
   done
fi

echo "Individual samples have been correctly processed bro!!"

#Peak calling samples:

i=1
while [ $i -le $NUMTF ]
do
   j=1
   while [ $j -le $NUMCONTROL ]
   do
      macs2 callpeak -t ../samples/chip/chip_sample_$i/*bam -c ../samples/control/control_sample_$j/*bam -f BAM --outdir . -n $EXP$i$j
      ((j++))
   done
   ((i++))
done

echo "Peaks calling done!"

# Regulome determination

cd
cp $INSDIR/ChipsAhoy/peaks_script.R $WD/$EXP/results
cd $WD/$EXP/results

NARROWPEAK=()
NARROWPEAK+=(*narrowPeak)
SUMMITSBED=()
SUMMITSBED+=(*summits.bed)

NRESULTS=${#SUMMITSBED[@]}

i=1
while [ $i -le $NRESULTS ]
do
   j=$(($i-1))
   Rscript peaks_script.R ${NARROWPEAK[$j]} ${SUMMITSBED[$j]} $UP1 $DOWN1 $UP2 $DOWN2 $PVALUEGO $PVALUEKEGG Plot$i  --verbose
   mv Rplots.pdf Rplots$i.pdf
   mv regulome.txt regulome$i.txt
   ((i++))
done

rm peaks_script.R

##Homer analysis.

i=1
while [ $i -le $NRESULTS ]
do
  j=$(($i-1))
  findMotifsGenome.pl ${SUMMITSBED[$j]} ../genome/genome.fa find_motifs$i -len 8 -size 100
  ((i++))
done

cd
cp $INSDIR/ChipsAhoy/chipsahoy $WD/$EXP/scripts
cp $INSDIR/ChipsAhoy/sample_processing $WD/$EXP/scripts
cp $INSDIR/ChipsAhoy/peaks_script.R $WD/$EXP/scripts
